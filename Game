class Game():
    # Флаги направления движения
    (DIR_UP, DIR_RIGHT, DIR_DOWN, DIR_LEFT) = range(4)

    TILE_SIZE = 16

    def __init__(self):

        global screen, sprites, play_sounds, sounds

        pygame.init()

        # центрирование камеры
        os.environ['SDL_VIDEO_WINDOW_POS'] = 'center'

        if play_sounds:
            pygame.mixer.pre_init(44100, -16, 1, 512)

        pygame.display.set_caption("Battle City")

        size = width, height = 480, 416

        if "-f" in sys.argv[1:]:
            screen = pygame.display.set_mode(size, pygame.FULLSCREEN)
        else:
            screen = pygame.display.set_mode(size)

        self.clock = pygame.time.Clock()

        # загрузка спрайтов версия funk
        sprites = pygame.transform.scale2x(pygame.image.load("D:\Sourses\PyGame\DATA\images/sprites.gif"))
        screen.set_colorkey((0,138,104))

        # загрузка спрайтов версия pixel
        # sprites = pygame.transform.scale(pygame.image.load("images/sprites.gif"), [192, 224])

        pygame.display.set_icon(sprites.subsurface(0, 0, 13 * 2, 13 * 2))

        # Загрузка звуков
        if play_sounds:
            pygame.mixer.init(44100, -16, 1, 512)

            sounds["start"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/gamestart.ogg")
            sounds["end"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/gameover.ogg")
            sounds["score"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/score.ogg")
            sounds["fire"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/fire.ogg")
            sounds["explosion"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/explosion.ogg")
            sounds["brick"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/brick.ogg")
            sounds["steel"] = pygame.mixer.Sound("D:\Sourses\PyGame\DATA\sounds/steel.ogg")

        self.enemy_life_image = sprites.subsurface(81 * 2, 57 * 2, 7 * 2, 7 * 2)
        self.player_life_image = sprites.subsurface(89 * 2, 56 * 2, 7 * 2, 8 * 2)
        self.flag_image = sprites.subsurface(64 * 2, 49 * 2, 16 * 2, 15 * 2)

        # Интро
        self.player_image = pygame.transform.rotate(sprites.subsurface(0, 0, 13 * 2, 13 * 2), 270)

        # Враги не появляются пока True
        self.timefreeze = False

        # загрузка шрифта
        self.font = pygame.font.Font("D:\Sourses\PyGame\DATA/fonts/prstart.ttf", 16)

        # предварительная обработка "GAME OVER"
        self.im_go = pygame.Surface((64, 40))
        self.im_go.set_colorkey((0, 0, 0))
        self.im_go.blit(self.font.render("GAME", False, (127, 64, 64)), [0, 0])
        self.im_go.blit(self.font.render("OVER", False, (127, 64, 64)), [0, 20])

        self.num_players = 1
        del players[:]
        del bullets[:]
        del enemies[:]
        del bonuses[:]
        self.num_of_players = 1



    def shieldPlayer(self, player, shield=True, duration=None):
        # Добавить\убрать щит
        # Для игрока

        player.shielded = shield
        if shield:
            player.timer_uuid_shield = gtimer.add(100, lambda: player.toggleShieldImage())
        else:
            gtimer.destroy(player.timer_uuid_shield)

        if shield and duration != None:
            gtimer.add(duration, lambda: self.shieldPlayer(player, False), 1)

    def spawnEnemy(self):
        # Появление врагов если:
        # -хотя бы 1 в очереди
        # -не превышает максимальное число для карты
        # -timefreeze != True

        global enemies

        if len(enemies) >= self.level.max_active_enemies:
            return
        if len(self.level.enemies_left) < 1 or self.timefreeze:
            return
        enemy = Enemy(self.level, 1)

        enemies.append(enemy)

    def respawnPlayer(self, player, clear_scores=False):
        player.reset()

        if clear_scores:
            player.trophies = {
                "enemy0": 0, "enemy1": 0, "enemy2": 0, "enemy3": 0
            }

        self.shieldPlayer(player, True, 4000)

    def gameOver(self):
        # Анимация "GAME OVER" и переход в меню

        global play_sounds, sounds

        print("Game Over")
        if play_sounds:
            for sound in sounds:
                sounds[sound].stop()
            sounds["end"].play()

        self.game_over_y = 416 + 40

        self.game_over = True
        gtimer.add(3000, lambda: self.showScores(), 1)

    def gameOverScreen(self):
        # Показывает картинку "GAME OVER"

        global screen

        # Остановка главного цикла
        self.running = False
        screen.fill([0, 0, 0])

        self.writeInBricks("game", [125, 140])
        self.writeInBricks("over", [125, 220])
        pygame.display.flip()

        while 1:
            time_passed = self.clock.tick(50)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    quit()
                elif event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                        self.showMenu()
                        return

    def showMenu(self):
        # Показывает меню
        # Картинка меняется если нажаты кнопки UP или DOWN
        # При нажатии ENTER запускается игра с выбраным колисеством игроков

        global players, screen

        self.running = False

        # Очистка таймеров
        del gtimer.timers[:]

        # Выбор начальной карты
        self.stage = 1

        self.animateIntroScreen()

        main_loop = True
        while main_loop:
            time_passed = self.clock.tick(50)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        quit()
                    elif event.key == pygame.K_UP:
                        if self.num_of_players == 2:
                            self.num_of_players = 1
                            self.drawIntroScreen()
                    elif event.key == pygame.K_DOWN:
                        if self.num_of_players == 1:
                            self.num_of_players = 2
                            self.drawIntroScreen()
                    elif event.key == pygame.K_RETURN:
                        main_loop = False

        del players[:]
        self.nextLevel()

    def reloadPlayers(self):
        # Инициализация игроков
        # Если игроки уже существуют, то перезагрузить их

        global players

        if len(players) == 0:
            # Игрок 1
            x = 8 * self.TILE_SIZE + (self.TILE_SIZE * 2 - 26) / 2
            y = 24 * self.TILE_SIZE + (self.TILE_SIZE * 2 - 26) / 2

            player = Player(
                self.level, 0, [x, y], self.DIR_UP, (0, 0, 13 * 2, 13 * 2)
            )
            players.append(player)

            # Игрок 2, если существует
            if self.num_of_players == 2:
                x = 16 * self.TILE_SIZE + (self.TILE_SIZE * 2 - 26) / 2
                y = 24 * self.TILE_SIZE + (self.TILE_SIZE * 2 - 26) / 2
                player = Player(
                    self.level, 0, [x, y], self.DIR_UP, (16 * 2, 0, 13 * 2, 13 * 2)
                )
                player.controls = [102, 119, 100, 115, 98]
                players.append(player)

        for player in players:
            player.level = self.level
            self.respawnPlayer(player, True)

    def showScores(self):
        # Показывает счет

        global screen, sprites, players, play_sounds, sounds

        self.running = False
        del gtimer.timers[:]
        if play_sounds:
            for sound in sounds:
                sounds[sound].stop()
        hiscore = self.loadHiscore()

        # Обновление рекордов
        if players[0].score > hiscore:
            hiscore = players[0].score
            self.saveHiscore(hiscore)
        if self.num_of_players == 2 and players[1].score > hiscore:
            hiscore = players[1].score
            self.saveHiscore(hiscore)

        img_tanks = [
            sprites.subsurface(32 * 2, 0, 13 * 2, 15 * 2),
            sprites.subsurface(48 * 2, 0, 13 * 2, 15 * 2),
            sprites.subsurface(64 * 2, 0, 13 * 2, 15 * 2),
            sprites.subsurface(80 * 2, 0, 13 * 2, 15 * 2)
        ]

        img_arrows = [
            sprites.subsurface(81 * 2, 48 * 2, 7 * 2, 7 * 2),
            sprites.subsurface(88 * 2, 48 * 2, 7 * 2, 7 * 2)
        ]

        screen.fill([0, 0, 0])

        black = pygame.Color("black")
        white = pygame.Color("white")
        purple = pygame.Color(127, 64, 64)
        pink = pygame.Color(191, 160, 128)

        screen.blit(self.font.render("HISCORE", False, purple), [105, 35])
        screen.blit(self.font.render(str(hiscore), False, pink), [295, 35])
        screen.blit(self.font.render("STAGE" + str(self.stage).rjust(3), False, white), [170, 65])
        screen.blit(self.font.render("I-PLAYER", False, purple), [25, 95])

        # player 1 общий счет
        screen.blit(self.font.render(str(players[0].score).rjust(8), False, pink), [25, 125])

        if self.num_of_players == 2:
            screen.blit(self.font.render("II-PLAYER", False, purple), [310, 95])

            # player 2 общий счет
            screen.blit(self.font.render(str(players[1].score).rjust(8), False, pink), [325, 125])

        # танки
        for i in range(4):
            screen.blit(img_tanks[i], [226, 160 + (i * 45)])
            screen.blit(img_arrows[0], [206, 168 + (i * 45)])
            if self.num_of_players == 2:
                screen.blit(img_arrows[1], [258, 168 + (i * 45)])

        screen.blit(self.font.render("TOTAL", False, white), [70, 335])

        pygame.draw.line(screen, white, [170, 330], [307, 330], 4)

        pygame.display.flip()

        self.clock.tick(2)

        interval = 5

        # очки и убийства
        for i in range(4):

            # трофеи
            tanks = players[0].trophies["enemy" + str(i)]

            for n in range(tanks + 1):
                if n > 0 and play_sounds:
                    sounds["score"].play()

                # стереть предыдущий текст
                screen.blit(self.font.render(str(n - 1).rjust(2), False, black), [170, 168 + (i * 45)])
                # новое число врагов
                screen.blit(self.font.render(str(n).rjust(2), False, white), [170, 168 + (i * 45)])
                # стереть предыдущий текст
                screen.blit(self.font.render(str((n - 1) * (i + 1) * 100).rjust(4) + " PTS", False, black),
                            [25, 168 + (i * 45)])
                # новый результат
                screen.blit(self.font.render(str(n * (i + 1) * 100).rjust(4) + " PTS", False, white),
                            [25, 168 + (i * 45)])
                pygame.display.flip()
                self.clock.tick(interval)

            if self.num_of_players == 2:
                tanks = players[1].trophies["enemy" + str(i)]

                for n in range(tanks + 1):

                    if n > 0 and play_sounds:
                        sounds["score"].play()

                    screen.blit(self.font.render(str(n - 1).rjust(2), False, black), [277, 168 + (i * 45)])
                    screen.blit(self.font.render(str(n).rjust(2), False, white), [277, 168 + (i * 45)])

                    screen.blit(self.font.render(str((n - 1) * (i + 1) * 100).rjust(4) + " PTS", False, black),
                                [325, 168 + (i * 45)])
                    screen.blit(self.font.render(str(n * (i + 1) * 100).rjust(4) + " PTS", False, white),
                                [325, 168 + (i * 45)])

                    pygame.display.flip()
                    self.clock.tick(interval)

            self.clock.tick(interval)

        # всего танков
        tanks = sum([i for i in players[0].trophies.values()]) - players[0].trophies["bonus"]
        screen.blit(self.font.render(str(tanks).rjust(2), False, white), [170, 335])
        if self.num_of_players == 2:
            tanks = sum([i for i in players[1].trophies.values()]) - players[1].trophies["bonus"]
            screen.blit(self.font.render(str(tanks).rjust(2), False, white), [277, 335])

        pygame.display.flip()

        self.clock.tick(2)

        if self.game_over:
            self.gameOverScreen()
        else:
            self.nextLevel()

    def draw(self):
        global screen, castle, players, enemies, bullets, bonuses

        screen.fill([0, 0, 0])

        self.level.draw([self.level.TILE_EMPTY, self.level.TILE_BRICK, self.level.TILE_STEEL, self.level.TILE_FROZE,
                         self.level.TILE_WATER])

        castle.draw()

        for enemy in enemies:
            enemy.draw()

        for label in labels:
            label.draw()

        for player in players:
            player.draw()

        for bullet in bullets:
            bullet.draw()

        # for bonus in bonuses:
        #     bonus.draw()

        self.level.draw([self.level.TILE_GRASS])

        if self.game_over:
            if self.game_over_y > 188:
                self.game_over_y -= 4
            screen.blit(self.im_go, [176, self.game_over_y])  # (416-64)/2=176

        self.drawSidebar()

        pygame.display.flip()

    def drawSidebar(self):

        global screen, players, enemies

        x = 416
        y = 0
        screen.fill([100, 100, 100], pygame.Rect([416, 0], [64, 416]))

        xpos = x + 16
        ypos = y + 16

        # осталось врагов
        for n in range(len(self.level.enemies_left) + len(enemies)):
            screen.blit(self.enemy_life_image, [xpos, ypos])
            if n % 2 == 1:
                xpos = x + 16
                ypos += 17
            else:
                xpos += 17

        # осталось жизней у игроков
        if pygame.font.get_init():
            text_color = pygame.Color('black')
            for n in range(len(players)):
                if n == 0:
                    screen.blit(self.font.render(str(n + 1) + "P", False, text_color), [x + 16, y + 200])
                    screen.blit(self.font.render(str(players[n].lives), False, text_color), [x + 31, y + 215])
                    screen.blit(self.player_life_image, [x + 17, y + 215])
                else:
                    screen.blit(self.font.render(str(n + 1) + "P", False, text_color), [x + 16, y + 240])
                    screen.blit(self.font.render(str(players[n].lives), False, text_color), [x + 31, y + 255])
                    screen.blit(self.player_life_image, [x + 17, y + 255])

            screen.blit(self.flag_image, [x + 17, y + 280])
            screen.blit(self.font.render(str(self.stage), False, text_color), [x + 17, y + 312])

    def drawIntroScreen(self, put_on_surface=True):
        # прорисовка главного меню
        # если put_on_surface == True, обновить окно
        # return None


        global screen

        screen.fill([0, 0, 0])

        if pygame.font.get_init():
            hiscore = self.loadHiscore()

            screen.blit(self.font.render("HI- " + str(hiscore), True, pygame.Color('white')), [170, 35])

            screen.blit(self.font.render("1 PLAYER", True, pygame.Color('white')), [165, 250])
            screen.blit(self.font.render("2 PLAYERS", True, pygame.Color('white')), [165, 275])

            screen.blit(self.font.render("(c) 1980 1985 NAMCO LTD.", True, pygame.Color('white')), [50, 350])
            screen.blit(self.font.render("NOT ALL RIGHTS RESERVED:)", True, pygame.Color('white')), [85, 380])

        if self.num_of_players == 1:
            screen.blit(self.player_image, [125, 245])
        elif self.num_of_players == 2:
            screen.blit(self.player_image, [125, 270])

        self.writeInBricks("battle", [65, 80])
        self.writeInBricks("city", [129, 160])

        if put_on_surface:
            pygame.display.flip()

    def animateIntroScreen(self):
        # Движение меню(начального интро) сверху вниз
        # При нажатии кнопки пропустить анимацию
        # return None


        global screen

        self.drawIntroScreen(False)
        screen_copy = screen.copy()

        screen.fill([0, 0, 0])

        y = 416

        while (y > 0):
            time_passed = self.clock.tick(50)
            for event in pygame.event.get():
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_RETURN:
                        y = 0
                        break

            screen.blit(screen_copy, [0, y])
            pygame.display.flip()

            y -= 5

        screen.blit(screen_copy, [0, 0])
        pygame.display.flip()

    def chunks(self, str, n):
        # Разбивает текстовую строку на части заданного размера
        # string str входящая строка
        # int n размер
        # return list

        return [str[i:i + n] for i in range(0, len(str), n)]

    def writeInBricks(self, text, pos):
        # Пишет текст в стиле "brick"
        # Используются только те буквы, которые есть в "Battle City" и "Game Over"
        # Во входных данных буквы могут быть любого регистра
        # Выходные данные - заглавные буквы
        # Каждая буква состоит из квадрата 7х7 заполненного кирпичами,
        # которая преобразовыввается в строку "1" и "0" длиной 49, которые хранятся
        # в 16 коде для экономии используемой памяти
        # return None

        global screen, sprites

        bricks = sprites.subsurface(56 * 2, 64 * 2, 8 * 2, 8 * 2)
        brick1 = bricks.subsurface((0, 0, 8, 8))
        brick2 = bricks.subsurface((8, 0, 8, 8))
        brick3 = bricks.subsurface((8, 8, 8, 8))
        brick4 = bricks.subsurface((0, 8, 8, 8))

        alphabet = {
            "a": "0071b63c7ff1e3",
            "b": "01fb1e3fd8f1fe",
            "c": "00799e0c18199e",
            "e": "01fb060f98307e",
            "g": "007d860cf8d99f",
            "i": "01f8c183060c7e",
            "l": "0183060c18307e",
            "m": "018fbffffaf1e3",
            "o": "00fb1e3c78f1be",
            "r": "01fb1e3cff3767",
            "t": "01f8c183060c18",
            "v": "018f1e3eef8e08",
            "y": "019b3667860c18"
        }

        abs_x, abs_y = pos

        for letter in text.lower():

            bin_str = ""
            for i in self.chunks(alphabet[letter], 2):
                bin_str += str(bin(int(i, 16)))[2:].rjust(8, "0")
            bin_str = bin_str[7:]

            x, y = 0, 0
            letter_w = 0
            surf_letter = pygame.Surface((56, 56))
            for i, row in enumerate(self.chunks(bin_str, 7)):
                for j, bit in enumerate(row):
                    if bit == "1":
                        if j % 2 == 0 and i % 2 == 0:
                            surf_letter.blit(brick1, [x, y])
                        elif j % 2 == 1 and i % 2 == 0:
                            surf_letter.blit(brick2, [x, y])
                        elif j % 2 == 1 and i % 2 == 1:
                            surf_letter.blit(brick3, [x, y])
                        elif j % 2 == 0 and i % 2 == 1:
                            surf_letter.blit(brick4, [x, y])
                        if x > letter_w:
                            letter_w = x
                    x += 8
                x = 0
                y += 8
            screen.blit(surf_letter, [abs_x, abs_y])
            abs_x += letter_w + 16

    def toggleEnemyFreeze(self, freeze=True):
         # Останавливает/запускает движение всех врагов

        global enemies

        for enemy in enemies:
            enemy.paused = freeze
        self.timefreeze = freeze

    def loadHiscore(self):
        # Загружает рекорды
        # Если невозможно загрузить, то return 20000
        # return int

        filename = ".hiscore"
        if (not os.path.isfile(filename)):
            return 20000

        f = open(filename, "r")
        hiscore = int(f.read())

        if hiscore > 19999 and hiscore < 1000000:
            return hiscore
        else:
            return 20000

    def saveHiscore(self, hiscore):
        # Сохраняет рекорд
        # return boolean

        try:
            f = open(".hiscore", "w")
        except:
            print("Can't save hiscore")
            return False
        f.write(str(hiscore))
        f.close()
        return True

    def finishLevel(self):
        # Завершение уровня
        # Результаты и переход к следующему уровню


        global play_sounds, sounds

        self.active = False
        gtimer.add(3000, lambda: self.showScores(), 1)

        print("Stage " + str(self.stage) + " completed")

    def nextLevel(self):


        global castle, players, bullets, play_sounds, sounds

        del bullets[:]
        del enemies[:]
        del bonuses[:]
        del gtimer.timers[:]
        castle.rebuild()

        # Загрузка следующего уровня
        self.stage += 1
        self.level = Level(self.stage)
        self.timefreeze = False

        # установка количества танковна уровне с параметрами (basic, fast, power, armor)
        levels_enemies = (
            (18, 2, 0, 0), (14, 4, 0, 2), (14, 4, 0, 2), (2, 5, 10, 3), (8, 5, 5, 2),
            (9, 2, 7, 2), (7, 4, 6, 3), (7, 4, 7, 2), (6, 4, 7, 3), (12, 2, 4, 2),
            (5, 5, 4, 6), (0, 6, 8, 6), (0, 8, 8, 4), (0, 4, 10, 6), (0, 2, 10, 8),
            (16, 2, 0, 2), (8, 2, 8, 2), (2, 8, 6, 4), (4, 4, 4, 8), (2, 8, 2, 8),
            (6, 2, 8, 4), (6, 8, 2, 4), (0, 10, 4, 6), (10, 4, 4, 2), (0, 8, 2, 10),
            (4, 6, 4, 6), (2, 8, 2, 8), (15, 2, 2, 1), (0, 4, 10, 6), (4, 8, 4, 4),
            (3, 8, 3, 6), (6, 4, 2, 8), (4, 4, 4, 8), (0, 10, 4, 6), (0, 6, 4, 10)
        )

        if self.stage <= 35:
            enemies_l = levels_enemies[self.stage - 1]
        else:
            enemies_l = levels_enemies[34]

        self.level.enemies_left = [0] * enemies_l[0] + [1] * enemies_l[1] + [2] * enemies_l[2] + [3] * enemies_l[3]
        random.shuffle(self.level.enemies_left)

        if play_sounds:
            sounds["start"].play()

        self.reloadPlayers()

        gtimer.add(3000, lambda: self.spawnEnemy())

        # если True, начинается анимация "game over"
        self.game_over = False

        # если False, игра закончится без анимации "game over"
        self.running = True

        self.active = True

        self.draw()

        # Основной цикл
        while self.running:

            time_passed = self.clock.tick(50)

            for event in pygame.event.get():
                if event.type == pygame.MOUSEBUTTONDOWN:
                    pass
                elif event.type == pygame.QUIT:
                    quit()
                elif event.type == pygame.KEYDOWN and not self.game_over and self.active:
                    if event.key == pygame.K_q:
                        quit()
                    # звуки
                    elif event.key == pygame.K_m:
                        play_sounds = not play_sounds
                        if not play_sounds:
                            pygame.mixer.stop()
                    for player in players:
                        if player.state == player.STATE_ALIVE:
                            try:
                                index = player.controls.index(event.key)
                            except:
                                pass
                            else:
                                if index == 0:
                                    if player.fire() and play_sounds:
                                        sounds["fire"].play()
                                elif index == 1:
                                    player.pressed[0] = True
                                elif index == 2:
                                    player.pressed[1] = True
                                elif index == 3:
                                    player.pressed[2] = True
                                elif index == 4:
                                    player.pressed[3] = True
                elif event.type == pygame.KEYUP and not self.game_over and self.active:
                    for player in players:
                        if player.state == player.STATE_ALIVE:
                            try:
                                index = player.controls.index(event.key)
                            except:
                                pass
                            else:
                                if index == 1:
                                    player.pressed[0] = False
                                elif index == 2:
                                    player.pressed[1] = False
                                elif index == 3:
                                    player.pressed[2] = False
                                elif index == 4:
                                    player.pressed[3] = False
            for player in players:
                if player.state == player.STATE_ALIVE and not self.game_over and self.active:
                    if player.pressed[0] == True:
                        player.move(self.DIR_UP)
                    elif player.pressed[1] == True:
                        player.move(self.DIR_RIGHT)
                    elif player.pressed[2] == True:
                        player.move(self.DIR_DOWN)
                    elif player.pressed[3] == True:
                        player.move(self.DIR_LEFT)
                player.update(time_passed)
            for enemy in enemies:
                if enemy.state == enemy.STATE_DEAD and not self.game_over and self.active:
                    enemies.remove(enemy)
                    if len(self.level.enemies_left) == 0 and len(enemies) == 0:
                        self.finishLevel()
                else:
                    enemy.update(time_passed)
            if not self.game_over and self.active:
                for player in players:
                    if player.state == player.STATE_ALIVE:
                        pass
                    elif player.state == player.STATE_DEAD:
                        player.lives -= 1
                        if player.lives > 0:
                            self.respawnPlayer(player)
                        else:
                            self.gameOver()
            for bullet in bullets:
                if bullet.state == bullet.STATE_REMOVED:
                    bullets.remove(bullet)
                else:
                    bullet.update()
            for label in labels:
                if not label.active:
                    labels.remove(label)
            if not self.game_over:
                if not castle.active:
                    self.gameOver()
            gtimer.update(time_passed)
            self.draw()

if __name__ == "__main__":
    gtimer = Timer()

    sprites = None
    screen = None
    players = []
    enemies = []
    bullets = []
    bonuses = []
    labels = []

    play_sounds = True
    sounds = {}

    game = Game()
    castle = Castle()
    game.showMenu()
